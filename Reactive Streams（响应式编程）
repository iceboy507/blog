一、Reactive Streams介绍
1.1 起源
Java中异步流处理的顶级概念：Reactive Streams

Reactive Streams，翻译为反应式流（响应式流），事实上，它并不是一个全新的事物，异步编程大家都有了解，Java里典型的多线程处理就是异步编程。而异步编程时，存在很多难题，比如典型的 回调地狱(Callback Hell), 一层套一层的回调函数简直是个灾难，这里列出几个异步编程常见的问题：
1. 超时、异常处理困难
2. 难以重构
3. 多个异步任务协同处理
为了解决异步编程过程中出现的种种难题，人们提出了各种各样方法来规避这些问题，这些方法成为 响应式编程(Reactive Programming), 就像面向对象编程、函数式编程一样，响应式编程也是另一种编程范式。
响应式编程本质上是对数据流或某种变化所做出的反应，但是这个变化什么时候发生是未知的，所以他是一种基于异步、回调的方式在处理问题。
注：
Reactive Programming = Streams + Operations
Streams代表被处理的数据节点，Operations代表那些异步处理

当越来越多的开发人员使用这种编程思想时，自然而然需要一套统一的规范。由此，2013年底Netflix，Pivotal和Lightbend中的工程师们，启动了Reactive Streams项目，希望为异步流(包含背压)处理提供标准，它包括针对运行时环境（JVM和JavaScript）以及网络协议的工作。


1.2 概念
Reactive Streams是一个API。Reactive Streams为我们提供了Java中的Reactive Programming的通用API。
Reactive Streams非常类似于JPA或JDBC。两者都是API规范，实际使用时需要使用API对应的具体实现。例如，从JDBC规范中，有DataSource接口，而Oracle JDBC实现了DataSource接口。Microsoft的SQL Server JDBC实现也实现了DataSource接口。
就像JPA或JDBC一样，Reactive Streams为我们提供了一个我们可以编写代码的API接口，而无需担心底层实现。

Reactive Streams API的范围是找到一组最小的接口、方法和协议，这些将描述必要的操作和实现，从而实现具有非阻塞回压的异步数据流。

从代码结构上看，它主要包含两部分： reactive-streams和reactive-streams-tck。 其中TCK意为 技术兼容包（Technology Compatibility Kit），为实现Reactive Streams接口提供帮助。
Reactive Streams API中仅仅包含了如下四个接口：
//发布者
public  interface  Publisher < T > {
    public  void  subscribe（Subscriber <？ super  T >  s）;
}
//订阅者
public  interface  Subscriber < T > {
    public  void  onSubscribe（Subscription  s）;
    public  void  onNext（T  t）;
    public  void  onError（Throwable  t）;
    public  void  onComplete（）;
}
//表示Subscriber消费Publisher发布的一个消息的生命周期
public interface Subscription {
    public void request(long n);
    public void cancel();
}
//处理器，表示一个处理阶段，它既是订阅者也是发布者，并且遵守两者的契约
public interface Processor<T, R> extends Subscriber<T>, Publisher<R> {
}

1.3 目标
Reactive Streams的主要目标有两个：

1. 管理跨异边界的流数据交换 - 即将元素传递到另一个线程或线程池；
2. 确保接收方不会强制缓冲任意数量的数据，为了使线程之间的队列有界，引入了回压（Back Pressure）。

传统异步编程的写法，不同任务分别在不同的线程中执行，协调这些线程执行的先后顺序、线程间的依赖顺序是一件非常麻烦的事情，而Reactive Streams就是为了解决该问题。
另外，Reactive Streams规范引入了回压（Back Pressure），可以动态控制线程间消息交换的速率，避免生产者产生过多的消息，消费者消费不完等类似问题。

1.4 理解
Reactive Streams 是一套非阻塞、回压的异步数据流的API。
1.4.1 Reactive
事实上，在某些语境下，reaactive也会被翻译为被动，而Reactive Streams是基于消息驱动的（也可以说是事件驱动的），当消息产生时，协调被动接受消息，并做出反馈，而非主动处理。因此，我们也可以这样理解：被动地接受消息后，做出相应的反应动作，这个行为称之为反应式。

1.4.2 Streams
理解为数据流，反应式编程的核心思想。
流的定义：随着时间顺序排列的一组序列。一切皆是流(Everything is a stream)。我们可以把一组数据抽象为流(可以想象流是一个数组)，把对流中节点的逻辑处理，抽象成对节点的一步一步的处理，围绕该节点做加工处理，最终获得结果。
这跟工厂车间的流水线非常相似，发布者将半成品放到传送带上，经过层层处理后，得到成品送到订阅者手中。
而异步特性，是体现在每一步的处理过程中的，每一步处理都是消息驱动的，不阻塞应用程序，被动获得结果后继续进行下一步。

注：
1. 响应式编程，在处理流中节点时，各个步骤都使用异步的、消息驱动的方式处理任务，才会节省性能。
2. 传统的命令式编程范式以控制流为核心，通过顺序、分支和循环三种控制结构来完成不同的行为，
在反应式编程中，应用程序从以逻辑为中心转换为了以数据为中心，这也是命令式到声明式的转换。

1.4.3 非阻塞、异步
反义词是阻塞、同步，目前在Java中，大多数应用程序是同步的，即暴力创建线程，线程阻塞时，一直等待直到有结果返回。
异步最吸引人的地方在于资源的充分利用，不把资源浪费在等待的时间上，代价是增加了程序的复杂度，而Reactive Streams封装了这些复杂性，使其变得简单。

1.4.4 回压(back-pressure)

背压是为了解决这个问题的： 上游组件了过量的消息，导致下游组件无法及时处理，从而导致程序崩溃。
对于正遭受压力的组件来说，无论是灾难性地失败，还是不受控地丢弃消息，都是不可接受的。既然它既不能应对压力，又不能直接做失败处理，那么它就应该向其上游组件传达其正在遭受压力的事实，并让它们降低负载。
这种背压（back-pressure）是一种重要的反馈机制，使得系统得以优雅地响应负载，而不是在负载下崩溃。相反，如果下游组件比较空闲，则可以向上游组件发出信号，请求获得更多的调用。


1.5 Java的Stream和Reactive Streams
它们都使用了流式处理的思想，围绕数据流处理数据，即完成了从命令式到声明式的转换，使数据处理更方便。
不同的地方在于，Java8中的Stream是同步的、阻塞的，Reactive Streams是异步的、非阻塞的。

1.6 具体实现框架
Reactive Streams 的实现现在比较多了。
1. RxJava
RxJava是ReactiveX项目中的Java实现。ReactiveX项目实现了很多语言，比如JavaScript，.NET（C＃），Scala，Clojure，C ++，Ruby，Python，PHP，Swift等。
RxJava早于Reactive Streams规范。虽然RxJava 2.0+确实实现了Reactive Streams API规范，单使用的术语略有不同。
2. Reactor
Reactor是Pivotal提供的Java实现，它作为Spring Framework 5的重要组成部分，是WebFlux采用的默认反应式框架。
3. Akka Streams
Akka Streams完全实现了Reactive Streams规范，但Akka Streams API与Reactive Streams API完全分离。


二、Project Reactor介绍
Project Reactor是Reactive Streams规范的一种实现，核心项目是Reactor Core。
Project Reactor是一个运行在JVM傻姑娘的反应式编程基础库，以“背压”的形式管理数据处理，提供了可组合的异步序列API Flux和Mono。同时，它也实现了Reactive Streams规范。
注：Project Reactor主要是由Pivotal公司开发和维护的，Spring框架也是该公司在维护，而且Spring Framework5中默认使用reactor作为反应式编程的实现，由此虽然Reactor不是Spring的子项目，也有人称Reactor为Spring Reactor。
众所周知，I/O阻塞浪费了系统性能，只有纯异步处理才能发挥协调的全部性能，不作丝毫浪费；而JDK的异步API比较难用，成为异步编程的瓶颈，这就是Reactor等其他反应式框架诞生的原因。

Reactor大大降低了异步编码难度（尽管相比同步编码，复杂度仍然是上升的），变得简单的根本原因，是编码思想的转变。
JDK的异步API使用的是传统的命令式编码，命令式编码是以控制流为核心，通过顺序、分支和循环三种控制结构来完成不同的行为。而Reactor使用反应式编程，应用程序从以逻辑为中心转换为以数据为中心，着也是命令式到声明式的转换。

2.1 从命令式到反应式编程
Reactor反应库旨在解决JVM上“经典”异步方法的缺点，同时还拥有如下特点：
1. 可组合行和可读性，完美规避了Callback Hell
2. 以流的形式进行数据处理时，为流中每个节点提供了丰富的操作符
3. 在Subscribe之前，不会有任何事情发生
4. 支持背压(回压)，消费者可以向生产者发出信号表明排放率过高
5. 支持两种反应序列：hot和cold


2.2 Flux & Mono
Flux<T>是一个标准的Reactive Streams的规范中的Publisher<T>, 它代表一个包含了[0...N]个元素的异步序列流。在Reactive Streams规范中个，针对流中每个元素，订阅者将会监听这三个事件：onNext、onComplete、onError。
Mono<T>是一个特殊的Flux<T>，它代表一个仅包含1个元素的异步序列流。因为只有一个元素，所以订阅着只需要监听onComplete、onError。
2.2.1 创建并订阅Flux或Mono
创建Flux或Mono的最简单方法，是使用那些工厂方法，如just、fromIterable、empty、range。当需要订阅他们时，可以调用如下几个重载的方法。

2.2.2 编程的方式创建Flux
generate、create、push、handle方法支持以编程的方式创建Flux，使创建方式更加灵活。
generate方法创建的流是同步的，流内元素是有序的，依次被订阅着消费。
create方法以异步、多线程的方式创建流。
push方法以异步、单线程的方式创建流。
handle方法是一个示例方法，它类似于generate，讲一个已经存在的流转换成同步的流。




参考文献
[1]. http://ypk1226.com/2019/07/01/reactive/reactive-streams/
